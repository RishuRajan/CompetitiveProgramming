//PROBLEM STATEMENT-

Given an array of positive and negative numbers. Find if there is a subarray (of size at-least one) with 0 sum.

Example 1:

Input:
5
4 2 -3 1 6

Output: 
Yes

Explanation: 
2, -3, 1 is the subarray 
with sum 0.
Example 2:

Input:
5
4 2 0 1 6

Output: 
Yes

Explanation: 
0 is one of the element 
in the array so there exist a 
subarray with sum 0.

//SOURCE CODE-

#include <bits/stdc++.h>
using namespace std;

class Solution{
    public:
    //Complete this function
    //Function to check whether there is a subarray present with 0-sum or not.
    bool subArrayExists(int arr[], int n)
    {
        //Your code here
        //Brute Force Approach
        /*
        bool flag=false;
        for(int i=0;i<n;i++)
        {
          int sum=0;
          if(!flag)
          for(int j=i;j<n;j++)
          {
            sum=sum+arr[j];
            if(sum==0){
                flag=true;
                break;
            }
        }
        else 
            break;
    }
    return flag;
    */
    
    /*
     int sum=0;
     int temp=0;
     unordered_map<int,int>rishu;
     rishu[0]=arr[0];
     for(int i=0;i<n;i++)
     {
         sum+=arr[i];
         if(sum==0 || rishu[sum] || arr[i]==0)
         {
             temp=1;
             break;
         }
         else
         {
             rishu[sum]=1;
         }
     }
     if(temp==1)
         return true;
     else
         return false;
         */
        unoredered_map<int,bool>rishu;
       int sum=0;
       for(int i=0;i<n;i++)
       {
        sum=sum+arr[i];
        if(sum==0 || rishu.count(sum)==true)
            return true;
        else
           rishu[sum]=true;
       }
       return false;
    }
};

int main()
{
	int t;
	cin>>t;
	while(t--)
	{
	    int n;
	    cin>>n;
	    int arr[n];
	    for(int i=0;i<n;i++)
	    cin>>arr[i];
	    Solution obj;
	    	if (obj.subArrayExists(arr, n))
		cout << "Yes\n";
	else
		cout << "No\n";
	}
	return 0;
}  
