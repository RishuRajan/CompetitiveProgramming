//PROBLEM STATEMENT-

Given a matrix of size r*c. Traverse the matrix in spiral form.

Example 1:

Input:
r = 4, c = 4
matrix[][] = {{1, 2, 3, 4},
           {5, 6, 7, 8},
           {9, 10, 11, 12},
           {13, 14, 15,16}}
Output: 
1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10
Explanation:

Example 2:

Input:
r = 3, c = 4  
matrix[][] = {{1, 2, 3, 4},
           {5, 6, 7, 8},
           {9, 10, 11, 12}}
Output: 
1 2 3 4 8 12 11 10 9 5 6 7
Explanation:
Applying same technique as shown above, 
output for the 2nd testcase will be 
1 2 3 4 8 12 11 10 9 5 6 7.

//SOURCE CODE-

#include <bits/stdc++.h> 
using namespace std; 

class Solution
{   
    public: 
    //Function to return a list of integers denoting spiral traversal of matrix.
    vector<int> spirallyTraverse(vector<vector<int> > matrix, int r, int c) 
    {
        // code here 
         int top=0;
        int bottom=r-1;
        int left=0;
        int right=c-1;
        int direction=0;
        vector<int>result;
        while(top<=bottom && left<=right)
        {
            if(direction==0){
                for(int i=left;i<=right;i++)
                    result.push_back(matrix[top][i]);
                top=top+1;
            }
            else if(direction==1){
                for(int i=top;i<=bottom;i++)
                   result.push_back(matrix[i][right]);
                right=right-1;
            }
            else if(direction==2){
                for(int i=right;i>=left;i--)
                    result.push_back(matrix[bottom][i]);
                bottom=bottom-1;
            }
            else if(direction==3){
                for(int i=bottom;i>=top;i--)
                    result.push_back(matrix[i][left]);
                left=left+1;
            }
            direction=(direction+1)%4;
        }
        return result;
    }
};

int main() 
{
    int t;
    cin>>t;
    
    while(t--) 
    {
        int r,c;
        cin>>r>>c;
        vector<vector<int> > matrix(r); 

        for(int i=0; i<r; i++)
        {
            matrix[i].assign(c, 0);
            for( int j=0; j<c; j++)
            {
                cin>>matrix[i][j];
            }
        }

        Solution ob;
        vector<int> result = ob.spirallyTraverse(matrix, r, c);
        for (int i = 0; i < result.size(); ++i)
                cout<<result[i]<<" ";
        cout<<endl;
    }
    return 0;
}  
