//PROBLEM STATEMENT-

Given an array of integers (A[])  and a number x, find the smallest subarray with sum greater than the given value.

Note: The answer always exists. It is guaranteed that x doesn't exceed the summation of a[i] (from 1 to N).

Example 1:

Input:
A[] = {1, 4, 45, 6, 0, 19}
x  =  51
Output: 3
Explanation:
Minimum length subarray is 
{4, 45, 6}

Example 2:
Input:
A[] = {1, 10, 5, 2, 7}
   x  = 9
Output: 1
Explanation:
Minimum length subarray is {10}

//SOURCE CODE-

#include <bits/stdc++.h>
using namespace std;


class Solution{
  public:

    int sb(int arr[], int n, int x)
    {
        // Your code goes here  
        int start=0;//initializing start of window
        int end=0;//initializing end of window
        int window_size=(n+1);//in worst senario maximum length of window
        int curr_windowsum=0;//initializing current window sum
        while(end<n)//traversing the given array
        {
            while(curr_windowsum<=x && end<n)//it means we have to add some more elements to satisfy the condition and expad our window size
            {
                curr_windowsum+=arr[end];
                end++;
            }
            while(curr_windowsum>x && start<n)//it means we get required sum now we have to shrink window size and update window length if it is less than the previous value
            {
                window_size=min(window_size,end-start);
                curr_windowsum=curr_windowsum-arr[start];
                start++;
            }
        }
        return window_size;
    }
};

int main() {
	// your code goes here
	int t;
	cin>>t;
	while(t--)
	{
		int n,x;
		cin>>n>>x;
		int a[n];
		for(int i=0;i<n;i++)
		cin>>a[i];
		Solution obj;
		cout<<obj.sb(a,n,x)<<endl;
	}
	return 0;
}  
